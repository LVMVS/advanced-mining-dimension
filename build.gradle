buildscript {
    repositories {
        maven { url = 'https://files.minecraftforge.net/maven' }
        maven { url = 'https://repo.spongepowered.org/maven' }
        maven { url = 'https://maven.maxhenkel.de/repository/public' }
        mavenCentral()
    }
    dependencies {
        classpath group: 'net.minecraftforge.gradle', name: 'ForgeGradle', version: '5.1.+', changing: true
        classpath group: 'de.maxhenkel.forge-update', name: 'forge-update', version: '1.0.4'
        classpath group: 'org.spongepowered', name: 'mixingradle', version: '0.7-SNAPSHOT'
    }
}

plugins {
    // https://github.com/matthewprenger/CurseGradle
    id "com.matthewprenger.cursegradle" version "1.4.0"
    id "com.github.johnrengelman.shadow" version "7.1.0"
    id "com.modrinth.minotaur" version "2.+"
}

apply plugin: 'net.minecraftforge.gradle'
apply plugin: 'forge-update'
apply plugin: 'idea'
apply plugin: 'org.spongepowered.mixin'

idea {
    module {
        downloadJavadoc = true
        downloadSources = true
    }
}

version = mod_version
group = mod_packagename
archivesBaseName = mod_id

java.toolchain.languageVersion = JavaLanguageVersion.of(17)

minecraft {
    mappings channel: 'official', version: mod_minecraft_version

    runs {
        client {
            workingDirectory project.file('run').canonicalPath
            property 'forge.logging.console.level', 'debug'
            args = ['--username', 'henkelmax']
            source sourceSets.main
            mods {
                mod_id {
                    source sourceSets.main
                }
            }
        }
        server {
            workingDirectory project.file('run/server').canonicalPath
            property 'forge.logging.console.level', 'debug'
            source sourceSets.main
            mods {
                mod_id {
                    source sourceSets.main
                }
            }
        }
        data {
            workingDirectory project.file('run')
            property 'forge.logging.console.level', 'debug'
            args '--mod', mod_id, '--all', '--output', file('src/generated/resources/')

            mods {
                mod_id {
                    source sourceSets.main
                }
            }
        }
    }
}

sourceSets.main.resources { srcDir 'src/generated/resources' }

dependencies {
    minecraft "net.minecraftforge:forge:${mod_minecraft_version}-${forge_version}"

    shadow fg.deobf("de.maxhenkel.corelib:corelib:${mod_minecraft_version}-${corelib_version}:api")
    runtimeOnly fg.deobf("de.maxhenkel.corelib:corelib:${mod_minecraft_version}-${corelib_version}")
    runtimeOnly fg.deobf("de.maxhenkel.corelib:corelib:${mod_minecraft_version}-${corelib_version}:javadoc")

    annotationProcessor 'org.spongepowered:mixin:0.8.4:processor'
}

mixin {
    add sourceSets.main, "mining_dimension.refmap.json"
}

jar {
    manifest {
        attributes(["Specification-Title"     : mod_name,
                    "Specification-Vendor"    : mod_vendor,
                    "Specification-Version"   : "1",
                    "Implementation-Title"    : mod_name,
                    "Implementation-Version"  : mod_version,
                    "Implementation-Vendor"   : mod_vendor,
                    "Implementation-Timestamp": new Date().format("yyyy-MM-dd'T'HH:mm:ssZ"),
                    "MixinConnector"          : "de.maxhenkel.miningdimension.mixin.MixinConnector"
        ])
    }
}

processResources {
    filesMatching("**/*.toml") {
        expand 'mod_id': mod_id,
                'mod_version': mod_version,
                'mod_vendor': mod_vendor,
                'mod_name': mod_name,
                'mod_forge_version': mod_forge_version,
                'mod_loader_version': mod_loader_version,
                'mod_minecraft_version': mod_minecraft_version
    }
}

curseforge {
    def apiKeyFile = file('curseforge_api_key.txt')
    if (System.env.CURSEFORGE_API_KEY != null) {
        apiKey = System.env.CURSEFORGE_API_KEY;
    } else if (apiKeyFile.exists()) {
        apiKey = apiKeyFile.text
    } else {
        apiKey = ""
    }
    project {
        id = curse_id
        changelogType = 'markdown'
        changelog = file('changelog.md')
        releaseType = release_type
        addGameVersion mod_minecraft_version
        addGameVersion 'Forge'
        addGameVersion 'Java 17'
        mainArtifact(jar) {
            displayName = "[${mod_minecraft_version}] ${mod_name} ${mod_version}"
        }
    }
}

tasks.modrinth.configure({
    group = 'upload'
})
tasks.modrinthSyncBody.configure({
    group = 'upload'
})

modrinth {
    token = file("${rootDir}/modrinth_token.txt").exists() ? file("${rootDir}/modrinth_token.txt").text : ''
    projectId = modrinth_id
    versionNumber = "forge-${mod_version}"
    versionName = "[FORGE][${mod_minecraft_version}] ${mod_name} ${mod_version}"
    uploadFile = jar
    versionType = release_type.toUpperCase()
    changelog = file("changelog.md").text
    gameVersions = [mod_minecraft_version]
    loaders = ['forge']
    syncBodyFrom = file("readme.md").text
}
tasks.modrinth.dependsOn(build)

forgeUpdate {
    def messages = []
    file('changelog.md').eachLine { String line ->
        if (line.trim().startsWith('-')) {
            messages.add(line.replaceFirst('-', '').trim())
        }
    }
    def apiKeyFile = file('forge_update_api_key.txt')
    if (System.env.FORGE_UPDATE_API_KEY != null) {
        apiKey = System.env.FORGE_UPDATE_API_KEY;
    } else if (apiKeyFile.exists()) {
        apiKey = apiKeyFile.text
    } else {
        apiKey = ""
    }
    serverURL = 'https://update.maxhenkel.de/'
    modID = mod_id
    gameVersion = mod_minecraft_version
    modVersion = mod_version
    updateMessages = messages
    releaseType = release_type
    tags = recommended == 'true' ? ['recommended'] : []
}

repositories {
    maven {
        name = "henkelmax.public"
        url = 'https://maven.maxhenkel.de/repository/public'
    }
    mavenLocal()
}

javadoc {
    failOnError = false
}

task deobfJar(type: Jar) {
    classifier 'deobf'
    from sourceSets.main.output
    manifest {
        attributes(["Specification-Title"     : mod_name,
                    "Specification-Vendor"    : mod_vendor,
                    "Specification-Version"   : "1",
                    "Implementation-Title"    : mod_name,
                    "Implementation-Version"  : mod_version,
                    "Implementation-Vendor"   : mod_vendor,
                    "Implementation-Timestamp": new Date().format("yyyy-MM-dd'T'HH:mm:ssZ"),
                    "MixinConnector"          : "de.maxhenkel.miningdimension.mixin.MixinConnector"])
    }
}

task sourcesJar(type: Jar) {
    classifier 'sources'
    from sourceSets.main.allJava
}

task javadocJar(type: Jar, dependsOn: javadoc) {
    classifier 'javadoc'
    from javadoc.getDestinationDir()
}

artifacts {
    archives deobfJar
    archives sourcesJar
    archives javadocJar
    archives shadowJar
}

jar.finalizedBy('reobfJar')

shadowJar {
    project.configurations.shadow.setTransitive(true);
    configurations = [project.configurations.shadow]
    classifier ""
    relocate 'de.maxhenkel.corelib', "de.maxhenkel.miningdimension.corelib"
}

reobf {
    shadowJar {}
}